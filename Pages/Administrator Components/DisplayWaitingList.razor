@inject AdministratorServices administratorServices
@inject StudentService studentsServices;

<h3>DisplayWaitingList</h3>

<table class="table table-hover text-uppercase align-content-center">
    <thead class="table-primary">
        <!-- Table header row -->
        <tr>
            <th>Name</th>
            <th>Surname</th>
            <th>Cellphone Number</th>
            <th>Grade</th>
            <th>Area</th>
            <th>BusNumber</th>
            <th>Start Date </th>
            <th>End Date</th>
            <th>Date Created</th>
            <th>Time Created</th>
            
            <!-- Add more header cells as needed -->
        </tr>
    </thead>
    <tbody>
        <!-- Table body rows -->
        @foreach (var item in studentsOnWaitingList)
        {
            <tr class="align-content-lg-center">
                <td> @childUserName(item.ChildUserNameId).Name</td>
                <td> @childUserName(item.ChildUserNameId).Surname</td>
                <td> @childUserName(item.ChildUserNameId).CellphoneNumber</td>
                <td> @childUserName(item.ChildUserNameId).Grade</td>
                <td> @item.Area</td>
                <td> @item.BusNumber</td>
                <td> @item.TakingBusStartDate</td>
                <td> @item.TakingBusEndDate</td>
                <td> @item.DateEntryCreated</td>
                <td> @item.TimeEntryCreated</td>

            </tr>
        }
    </tbody>
</table>

@code {
    public List<WaitingListDetails> studentsOnWaitingList = new List<WaitingListDetails>();
    public List<StudentDetails> studnetDetails = new List<StudentDetails>();

    protected override async Task OnInitializedAsync()
    {
        studentsOnWaitingList = administratorServices.GetStudentsOnWaitingList();        
    }

    public StudentDetails childUserName(string userName )
    {
        var thisStudentsDetails = studentsServices.GetStudentObjectByChildUserNameID(userName);
        return thisStudentsDetails;

    }

}
