@using BusServiceApplication.Services;
@using BusServiceApplication.Data.Models;
@using BusServiceApplication.Pages.CalanderComponenets;
@using BusServiceApplication.HelperMethods;
@using Newtonsoft.Json;
@inject BusRoutServices busRoutServices;
@inject StudentService studentServices;
@inject NavigationManager navigationManager; 




<div class="container mt-5" style="background-color: #f8f9fa; padding: 20px;">
    <h1 class="text-center mb-4">Morning Trip</h1>

    <h3 class="text-center mb-4">Select the dates between which you want to book</h3>

    <div class="container mt-5">
        <div class="row">
            <div class="col-6">
                <CalanderStartDate StartDate="selectedStartDate" StartDateChanged="HandleStartDateChanged" />
            </div>
            <div class="col-6">
                <CalanderEndDate EndDate="selectedEndDate" EndDateChanged="HandleEndDateChanged" />
                <br />
            </div>
        </div>
    </div>

    <EditForm Model="busDetails" OnValidSubmit="HandleAddingStudentToBus">
        <div class="mb-4 text-center">
            <label for="selectedStudent" class="form-label font-weight-bold mb-2">Which Student would you like to book for</label>
            <select @bind="@selectedStudentForForm" class="form-select" id="selectedStudent">
                <option selected disabled>Select A student</option>
                @foreach (var item in listOfStudents)
                {
                    <option value="@item.childUserNameId">@item.Name, @item.Surname</option>
                }
            </select>
        </div>

     <div class="mb-4 text-center">
    <label for="selectedBusOption" class="form-label font-weight-bold mb-2">Which area would you like to book for</label>
    <select @bind="selectedBusOption" class="form-select" id="selectedBusOption">
                <option selected disabled>Select an area</option>
        <option value="1">Rooihuiskraal/The Reeds</option>
        <option value="2">Wierdapark/Amberfield</option>
        <option value="3">Centurion</option>
    </select>
</div>


        @if (selectedBusOption == 1)
        {

            // set the values of the busDetials object to the values in the object at selected
            
            busDetails.BusNumber = busOneTripDetails.BusNumber;
            busDetails.BusLimit = busOneTripDetails.BusLimit;
            busDetails.BusRouteAAddress = busOneTripDetails.BusRouteAAddress;
            busDetails.BusRouteAPickupTime = busOneTripDetails.BusRouteAPickupTime;
            busDetails.BusRouteBAddress = busOneTripDetails.BusRouteBAddress;
            busDetails.BusRouteBPickupTime = busOneTripDetails.BusRouteBPickupTime;
            busDetails.MorningTrip = busOneTripDetails.MorningTrip;
            busDetails.Area = busOneTripDetails.Area;
            showMessage = true;
        }
        else if (selectedBusOption == 2)
        {
            
            busDetails.BusNumber = busTwoTripDetails.BusNumber;
            busDetails.BusLimit = busTwoTripDetails.BusLimit;
            busDetails.BusRouteAAddress = busTwoTripDetails.BusRouteAAddress;
            busDetails.BusRouteAPickupTime = busTwoTripDetails.BusRouteAPickupTime;
            busDetails.BusRouteBAddress = busTwoTripDetails.BusRouteBAddress;
            busDetails.BusRouteBPickupTime = busTwoTripDetails.BusRouteBPickupTime;
            busDetails.MorningTrip = busTwoTripDetails.MorningTrip;
            busDetails.Area = busTwoTripDetails.Area;
            showMessage = true;
        }
        else if (selectedBusOption == 3)
        {
            busDetails.BusNumber = busThreeTripDetails.BusNumber;
            busDetails.BusLimit = busThreeTripDetails.BusLimit;
            busDetails.BusRouteAAddress = busThreeTripDetails.BusRouteAAddress;
            busDetails.BusRouteAPickupTime = busThreeTripDetails.BusRouteAPickupTime;
            busDetails.BusRouteBAddress = busThreeTripDetails.BusRouteBAddress;
            busDetails.BusRouteBPickupTime = busThreeTripDetails.BusRouteBPickupTime;
            busDetails.MorningTrip = busThreeTripDetails.MorningTrip;
            busDetails.Area = busThreeTripDetails.Area;
            showMessage = true;
        }

        <div class="text-center mb-4">
            <button type="submit" class="btn btn-primary">Add Student to List</button>
        </div>


        <div class="mt-3 text-center">
            @if (showMessage == true)
            {
                var capacityMessage = DisplayCapacityMessageForParent(busDetails.BusNumber);
                <h3 style="color: @capacityMessage.Color;">@capacityMessage.Message</h3>
            }
            <p><strong>Bus Limit:</strong> @busDetails.BusLimit</p>
            <p><strong>First Stop:</strong> @busDetails.BusRouteAAddress</p>
            <p><strong>Arrival Time:</strong> @busDetails.BusRouteAPickupTime</p>
            <p><strong>Second Stop:</strong> @busDetails.BusRouteBAddress</p>
            <p><strong>Arrival Time:</strong> @busDetails.BusRouteBPickupTime</p>
        </div>

    </EditForm>
</div>


@code {
    [Parameter]
    public int ParentID { get; set; }
    public bool isSpaceOnBus { get; set; }
    public string messageForBusCapacity = string.Empty;
   



    // create list for students object 
    public string selectedStudentForForm { get; set;  }
    public List<StudentDetails> listOfStudents = new List<StudentDetails>();

    protected override async Task OnInitializedAsync()
    {
        // method is run asynchronusly meaning we can run it parallel to other methods
        listOfStudents = studentServices.getAllStudentsUnderLoggedInParent(ParentID);
    }
    //need to display this list to the parent and let them select which student they are referencing. Done 


    //create object that we will be passing to the DB 
    BusDetailsMorning busDetails = new BusDetailsMorning();
    // when setting up the different bus types , we need an if stateent to select the items value
    public int selectedBusOption { get; set; }


    public void HandleAddingStudentToBus(EditContext editContext)
    {
        var newStudentToAddToBus = (BusDetailsMorning)editContext.Model;
        newStudentToAddToBus.DateEntryCreated = DateTime.Today;

        //run the metjod that retuns the time only and store it in the correct property 
        var entryTime = getCurrentTime();
        newStudentToAddToBus.TimeEntryCreated = entryTime;
        // need to get student number 
        newStudentToAddToBus.ChildUserNameId = selectedStudentForForm;
        newStudentToAddToBus.TakingBusStartDate = selectedStartDate;
        newStudentToAddToBus.TakingBusEndDate = selectedEndDate;
        isSpaceOnBus = busRoutServices.checkSpaceOnTheBusMorning(newStudentToAddToBus);
        informUserIfThereIsSpaceAvailable(isSpaceOnBus);
        determineIfStudentShouldBeAddedToWaitingList(newStudentToAddToBus, isSpaceOnBus);
        Refresh();
    }

 
 

    //checking space on Bus 
    public  async Task informUserIfThereIsSpaceAvailable(bool value)
    {
        if(value == true)
        {
            messageForBusCapacity = "There is currently space on the bus, the Student has been added to the bus schedule";
        }
        else
        {
            messageForBusCapacity = "There is currently No space on the Bus, Would you like to add your Student to the waiting List";
        }
    }


    public string getCurrentTime()
    {
        DateTime dateTime = DateTime.Now;
        string timeOnly = dateTime.ToString("HH:mm:ss");
        return timeOnly;
    }

    public void determineIfStudentShouldBeAddedToWaitingList(BusDetailsMorning studentWeAreAttemptingToAdd, bool isThereSpaceCheck)
    {
        //sending the correct email
        var parent = studentServices.GetParentObjectUsingchildUserNameID(studentWeAreAttemptingToAdd.ChildUserNameId); // This is how I get the Parent Details for the email
        var child = studentServices.GetStudentObjectByChildUserNameID(studentWeAreAttemptingToAdd.ChildUserNameId); // this is how we get the child object
        EmailSender emailSender = new EmailSender(); // create the object that we will use for the email service 


        if(isThereSpaceCheck == true)
        {
            //if there is space on the bus, this student will be added to the bus table 
            busRoutServices.addStudentToMorningBus(studentWeAreAttemptingToAdd);

            //send email 
            emailSender.SuccessfullyAddedToBus(parent.firstName, parent.emailAddress, child.Name, studentWeAreAttemptingToAdd.Area, "Morning ");
        }
        else
        {
            // Here we take the student details componenet that we wanted to add to the list 
            // write the variables to the WaitingListDetialsClass 
            // Add this WaitingListDetails object to the waiting List table 
            WaitingListDetails studentToAdd = new WaitingListDetails();
            studentToAdd.id = studentWeAreAttemptingToAdd.MorningId;
            studentToAdd.ChildUserNameId = studentWeAreAttemptingToAdd.ChildUserNameId;
            studentToAdd.BusNumber = studentWeAreAttemptingToAdd.BusNumber;
            studentToAdd.BusLimit = studentWeAreAttemptingToAdd.BusLimit;
            studentToAdd.MorningTrip = studentWeAreAttemptingToAdd.MorningTrip;
            studentToAdd.Area = studentWeAreAttemptingToAdd.Area;
            studentToAdd.BusRouteAAddress = studentWeAreAttemptingToAdd.BusRouteAAddress;
            studentToAdd.BusRouteAPickupTime = studentWeAreAttemptingToAdd.BusRouteAPickupTime;
            studentToAdd.BusRouteBAddress = studentWeAreAttemptingToAdd.BusRouteBAddress;
            studentToAdd.BusRouteBPickupTime = studentWeAreAttemptingToAdd.BusRouteBPickupTime;
            studentToAdd.DateEntryCreated = studentWeAreAttemptingToAdd.DateEntryCreated;
            studentToAdd.TimeEntryCreated = studentWeAreAttemptingToAdd.TimeEntryCreated;
            studentToAdd.TakingBusStartDate = studentWeAreAttemptingToAdd.TakingBusStartDate;
            studentToAdd.TakingBusEndDate = studentWeAreAttemptingToAdd.TakingBusEndDate;

            busRoutServices.addStudentToWaitingList(studentToAdd);

            //send email 
            emailSender.AddedToWaitingList(parent.firstName, parent.emailAddress, child.Name, studentWeAreAttemptingToAdd.Area);
        }
    }

    public void Refresh()
    {
        var refreshPage = new RefreshPage(navigationManager);
        refreshPage.refreshApplication();
    }



    //create a class from a List of fixed bus details
    public BusDetailsMorning busOneTripDetails = new BusDetailsMorning()
        {
            BusNumber = BusOneMorningTripDetails.BusNumber,
            BusLimit = BusOneMorningTripDetails.BusLimit,
            BusRouteAAddress = BusOneMorningTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusOneMorningTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusOneMorningTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusOneMorningTripDetails.BusRouteBPickupTime,
            MorningTrip = BusOneMorningTripDetails.MorningTrip,
            Area = BusOneMorningTripDetails.Area

        };

    public BusDetailsMorning busTwoTripDetails = new BusDetailsMorning()
        {
            BusNumber = BusTwoMorningTripDetails.BusNumber,
            BusLimit = BusTwoMorningTripDetails.BusLimit,
            BusRouteAAddress = BusTwoMorningTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusTwoMorningTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusTwoMorningTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusTwoMorningTripDetails.BusRouteBPickupTime,
            MorningTrip = BusTwoMorningTripDetails.MorningTrip,
            Area = BusTwoMorningTripDetails.Area
        };

    public BusDetailsMorning busThreeTripDetails = new BusDetailsMorning()
        {
            BusNumber = BusThreeMorningTripDetails.BusNumber,
            BusLimit = BusThreeMorningTripDetails.BusLimit,
            BusRouteAAddress = BusThreeMorningTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusThreeMorningTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusThreeMorningTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusThreeMorningTripDetails.BusRouteBPickupTime,
            MorningTrip = BusThreeMorningTripDetails.MorningTrip,
            Area = BusThreeMorningTripDetails.Area
        };

    //create logic that shows if the current buss is full and if child will be added to waiting List 
    // step 1 get a list of students on the current bus selected
    // step 2 complete a count on those students 

    public int countStudnetOnBus(int busNumber)
    {
        int studentsOnBus1 = 0;
        int studentsOnBus2 = 0;
        int studentsOnBus3 = 0;
        var StudentOnMorningBus = busRoutServices.GetListOfStudentsOnMorningBus();

        foreach (var item in StudentOnMorningBus)
        {
            if(item.BusNumber == 1)
            {
                studentsOnBus1++;
            }
            else if(item.BusNumber == 2 )
            {
                studentsOnBus2++;
            }
            else
            {
                studentsOnBus3++;
            }

        }

        if(busNumber == 1 )
        {
            return studentsOnBus1;
        }
        else if (busNumber == 2)
        {
            return studentsOnBus2;
        }
        else if (busNumber == 3)
        {
            return studentsOnBus3;
        }
        else
        {
            return -1; //incare of errors 
        }

    }
    public class CapacityMessage
    {
        public string Message { get; set; }
        public string Color { get; set; }
    }

    // step 3 compare that count to the max capacity of the bus 
    public CapacityMessage DisplayCapacityMessageForParent(int busNumber)
    {
        int studentsOnSelectedBus = countStudnetOnBus(busNumber);
        int busCapacity = 0;

        // Get the values
        if (busNumber == 1)
        {
            busCapacity = BusOneMorningTripDetails.BusLimit;
        }
        else if (busNumber == 2)
        {
            busCapacity = BusTwoMorningTripDetails.BusLimit;
        }
        else if (busNumber == 3)
        {
            busCapacity = BusThreeMorningTripDetails.BusLimit;
        }

        // Determine the color based on bus capacity
        string color = studentsOnSelectedBus < busCapacity ? "green" : "red";

        // Create the capacity message object
        CapacityMessage message = new CapacityMessage
            {
                Message = studentsOnSelectedBus < busCapacity
                        ? $"There bus currently has {busCapacity - studentsOnSelectedBus} seats available. Your child will be automatically added to the roster"
                        : $"The Bus is currently at capacity. \n The student will be placed on a waiting list.",
                Color = color
            };

        return message;
    }

    
    //handle the show message function in the select list 
        public bool showMessage = false;// message for capacity

   


    //Code to handle calander function

    private DateTime selectedStartDate;
    private DateTime selectedEndDate;

    private async Task HandleStartDateChanged(DateTime startDate)
    {
        selectedStartDate = startDate;
        // Additional logic, if needed
    }

    private async Task HandleEndDateChanged(DateTime endDate)
    {
        selectedEndDate = endDate;
        // Additional logic, if needed
    }

    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public EventCallback<DateTime> StartDateChanged { get; set; }

    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;
    private List<int> calendarDays;
    private int startDate = -1;
    private string startDateSelected = "Select date";


}

