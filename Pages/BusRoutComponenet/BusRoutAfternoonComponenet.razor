@using BusServiceApplication.Services;
@using BusServiceApplication.Data.Models;
@using BusServiceApplication.Pages.CalanderComponenets;
@using BusServiceApplication.HelperMethods;
@using Newtonsoft.Json;
@inject BusRoutServices busRoutServices;
@inject StudentService studentServices;
@inject NavigationManager navigationManager;

<h1>BusRoutAfternoonComponenet</h1>
<br />
<br />


<EditForm Model="busDetailsAfternoon" OnValidSubmit="HandleAddingStudentToBus">
    <h3> Select an area for pick up</h3>
    <h3>Which Student are you setting the details </h3>
    <select @bind="@selectedStudentForForm" class="form-select-lg  aria-label=Default"> @* this is where we generate the list for parents *@
        <option selected> Select A student </option>
        @foreach (var item in listOfStudents)
        {
            <option value="@item.childUserNameId">@item.Name , @item.Surname</option>
        }
    </select>

    <br />

    <select @bind="selectedBusOption" class="form-select-lg  aria-label=Default select example">
        <option selected> Select an area </option>
        <option value=1>Rooihuiskraal/The Reeds</option>
        <option value=2>Wierdapark/Amberfield</option>
        <option value=3>Centurion</option>
    </select>

    @if (selectedBusOption == 1)
    {
        // set the values of the busDetials object to the values in the object at selected
        busDetailsAfternoon.BusNumber = busOneTripDetails.BusNumber;
        busDetailsAfternoon.BusLimit = busOneTripDetails.BusLimit;
        busDetailsAfternoon.BusRouteAAddress = busOneTripDetails.BusRouteAAddress;
        busDetailsAfternoon.BusRouteAPickupTime = busOneTripDetails.BusRouteAPickupTime;
        busDetailsAfternoon.BusRouteBAddress = busOneTripDetails.BusRouteBAddress;
        busDetailsAfternoon.BusRouteBPickupTime = busOneTripDetails.BusRouteBPickupTime;
        busDetailsAfternoon.MorningTrip = busOneTripDetails.MorningTrip;
        busDetailsAfternoon.Area = busOneTripDetails.Area;

    }
    else if (selectedBusOption == 2)
    {
        busDetailsAfternoon.BusNumber = busTwoTripDetails.BusNumber;
        busDetailsAfternoon.BusLimit = busTwoTripDetails.BusLimit;
        busDetailsAfternoon.BusRouteAAddress = busTwoTripDetails.BusRouteAAddress;
        busDetailsAfternoon.BusRouteAPickupTime = busTwoTripDetails.BusRouteAPickupTime;
        busDetailsAfternoon.BusRouteBAddress = busTwoTripDetails.BusRouteBAddress;
        busDetailsAfternoon.BusRouteBPickupTime = busTwoTripDetails.BusRouteBPickupTime;
        busDetailsAfternoon.MorningTrip = busTwoTripDetails.MorningTrip;
        busDetailsAfternoon.Area = busTwoTripDetails.Area;
    }
    else if (selectedBusOption == 3)
    {
        busDetailsAfternoon.BusNumber = busThreeTripDetails.BusNumber;
        busDetailsAfternoon.BusLimit = busThreeTripDetails.BusLimit;
        busDetailsAfternoon.BusRouteAAddress = busThreeTripDetails.BusRouteAAddress;
        busDetailsAfternoon.BusRouteAPickupTime = busThreeTripDetails.BusRouteAPickupTime;
        busDetailsAfternoon.BusRouteBAddress = busThreeTripDetails.BusRouteBAddress;
        busDetailsAfternoon.BusRouteBPickupTime = busThreeTripDetails.BusRouteBPickupTime;
        busDetailsAfternoon.MorningTrip = busThreeTripDetails.MorningTrip;
        busDetailsAfternoon.Area = busThreeTripDetails.Area;
    }


    <button type="submit" class="btn-primary"> Add Student to List </button>


    <p> Bus Limit : @busDetailsAfternoon.BusLimit</p>
    <p> First Stop : @busDetailsAfternoon.BusRouteAAddress</p>
    <p> Arrival Time : @busDetailsAfternoon.BusRouteAPickupTime</p>
    <p> Second Stop : @busDetailsAfternoon.BusRouteBAddress</p>
    <p> Arrival Time : @busDetailsAfternoon.BusRouteBPickupTime</p>
</EditForm>


<h1>@messageForBusCapacity</h1> @*This is the where we display the message in for capacity *@

@*How we call the calander functions *@
<div class="container col-10 border border-primary mt-3">
    <div class="row">
    <div class="col - 6 ">
    <CalanderStartDate StartDate="selectedStartDate" StartDateChanged="HandleStartDateChanged" />
        </div >
        <div class="col - 6">
            <!-- Add the CalendarEndDate component here -->
            <CalanderEndDate EndDate="selectedEndDate" EndDateChanged="HandleEndDateChanged" />
        </div>
    </div>
</div>

@code {

    //set of properties we will use in addition to the modal to create the child object
    [Parameter]
    public int ParentID { get; set; }
    public bool isSpaceOnBus { get; set; }
    public string messageForBusCapacity = string.Empty;
    public int selectedBusOption { get; set; }  //use this value to store the selected option for bus routs

    public List<StudentDetails> listOfStudents = new List<StudentDetails>(); // create list for students object
    public string selectedStudentForForm { get; set; }

    public BusDetailsAfternoon busDetailsAfternoon = new BusDetailsAfternoon(); //Creating A list of Bus times and details for the afternoon

    protected override async Task OnInitializedAsync() // we Use This method so that when the page loads , we the list of students under the parent ID are loaded
    {
        listOfStudents = studentServices.getAllStudentsUnderLoggedInParent(ParentID); // method is run asynchronusly meaning we can run it parallel to other methods
    }



    public void HandleAddingStudentToBus(EditContext editContext)
    {
        var newStudentToAddToBus = (BusDetailsAfternoon)editContext.Model;
        newStudentToAddToBus.DateEntryCreated = DateTime.Today;
        //run the metjod that retuns the time only and store it in the correct property
        var entryTime = getCurrentTime();
        newStudentToAddToBus.TimeEntryCreated = entryTime;
        // need to get student number
        newStudentToAddToBus.ChildUserNameId = selectedStudentForForm;
        newStudentToAddToBus.TakingBusStartDate = selectedStartDate;
        newStudentToAddToBus.TakingBusEndDate = selectedEndDate;
        isSpaceOnBus = busRoutServices.checkSpaceOnTheBusAfternoon(newStudentToAddToBus);
        informUserIfThereIsSpaceAvailable(isSpaceOnBus);
        determineIfStudentShouldBeAddedToWaitingList(newStudentToAddToBus, isSpaceOnBus);
        Refresh();
    }

    public string getCurrentTime()
    {
        DateTime dateTime = DateTime.Now;
        string timeOnly = dateTime.ToString("HH:mm:ss");
        return timeOnly;
    }

    public async Task informUserIfThereIsSpaceAvailable(bool value)
    {
        if (value == true)
        {
            messageForBusCapacity = "There is currently space on the bus, the Student has been added to the bus schedule";
        }
        else
        {
            messageForBusCapacity = "There is currently No space on the Bus, Would you like to add your Student to the waiting List";
        }
    }

    public void determineIfStudentShouldBeAddedToWaitingList(BusDetailsAfternoon studentWeAreAttemptingToAdd, bool isThereSpaceCheck)
    {
        if (isThereSpaceCheck == true)
        {
            //if there is space on the bus, this student will be added to the bus table
            busRoutServices.addStudentToAfternoonBus(studentWeAreAttemptingToAdd);
        }
        else
        {
            // Here we take the student details componenet that we wanted to add to the list
            // write the variables to the WaitingListDetialsClass
            // Add this WaitingListDetails object to the waiting List table
            WaitingListDetails studentToAdd = new WaitingListDetails();
            studentToAdd.id = studentWeAreAttemptingToAdd.AfternoonID;
            studentToAdd.ChildUserNameId = studentWeAreAttemptingToAdd.ChildUserNameId;
            studentToAdd.BusNumber = studentWeAreAttemptingToAdd.BusNumber;
            studentToAdd.BusLimit = studentWeAreAttemptingToAdd.BusLimit;
            studentToAdd.MorningTrip = studentWeAreAttemptingToAdd.MorningTrip;
            studentToAdd.Area = studentWeAreAttemptingToAdd.Area;
            studentToAdd.BusRouteAAddress = studentWeAreAttemptingToAdd.BusRouteAAddress;
            studentToAdd.BusRouteAPickupTime = studentWeAreAttemptingToAdd.BusRouteAPickupTime;
            studentToAdd.BusRouteBAddress = studentWeAreAttemptingToAdd.BusRouteBAddress;
            studentToAdd.BusRouteBPickupTime = studentWeAreAttemptingToAdd.BusRouteBPickupTime;
            studentToAdd.DateEntryCreated = studentWeAreAttemptingToAdd.DateEntryCreated;
            studentToAdd.TimeEntryCreated = studentWeAreAttemptingToAdd.TimeEntryCreated;
            studentToAdd.TakingBusStartDate = studentWeAreAttemptingToAdd.TakingBusStartDate;
            studentToAdd.TakingBusEndDate = studentWeAreAttemptingToAdd.TakingBusEndDate;

            busRoutServices.addStudentToWaitingList(studentToAdd);
        }
    }

    public void Refresh()
    {
        var refreshPage = new RefreshPage(navigationManager);
        refreshPage.refreshApplication();
    }



    //create a class from a List of fixed bus details
    public BusDetailsAfternoon busOneTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = 1,
            BusLimit = 1,
            BusRouteAAddress = "Corner of Panorama and Marabou Road",
            BusRouteAPickupTime = "14:30",
            BusRouteBAddress = "Corner of Kolgansstraat and Skimmerstraat",
            BusRouteBPickupTime = "14:40",
            MorningTrip = false,
            Area = "Rooihuiskraal/The Reeds"

        };

    public BusDetailsAfternoon busTwoTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = 2,
            BusLimit = 1,
            BusRouteAAddress = "Corner of Reddersburg Street and Mafeking Drive",
            BusRouteAPickupTime = "14:25",
            BusRouteBAddress = "Corner of Theuns van Niekerkstraat and Roosmarynstraat",
            BusRouteBPickupTime = "14:30",
            MorningTrip = false,
            Area = "Wierdapark/Amberfield"
        };

    public BusDetailsAfternoon busThreeTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = 3,
            BusLimit = 1,
            BusRouteAAddress = "Corner of Jasper Drive and Tieroog Street",
            BusRouteAPickupTime = "14:30",
            BusRouteBAddress = "Corner of Louise Street and Von Willich Drive",
            BusRouteBPickupTime = "14:40",
            MorningTrip = false,
            Area = "Centurion"
        };




    //Code to handle calander function

    private DateTime selectedStartDate;
    private DateTime selectedEndDate;

    private async Task HandleStartDateChanged(DateTime startDate)
    {
        selectedStartDate = startDate;
        // Additional logic, if needed
    }

    private async Task HandleEndDateChanged(DateTime endDate)
    {
        selectedEndDate = endDate;
        // Additional logic, if needed
    }

    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public EventCallback<DateTime> StartDateChanged { get; set; }

    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;
    private List<int> calendarDays;
    private int startDate = -1;
    private string startDateSelected = "Select date";
}
