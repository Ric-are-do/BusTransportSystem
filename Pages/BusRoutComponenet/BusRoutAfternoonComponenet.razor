@using BusServiceApplication.Services;
@using BusServiceApplication.Data.Models;
@using BusServiceApplication.Pages.CalanderComponenets;
@using BusServiceApplication.HelperMethods;
@using Newtonsoft.Json;
@inject BusRoutServices busRoutServices;
@inject StudentService studentServices;
@inject NavigationManager navigationManager;

<div class="container mt-5" style="background-color: #f8f9fa; padding: 20px;">
    <h1 class="text-center mb-4">Afternoon Trip</h1>

    <h3 class="text-center mb-4">Select the dates between which you want to book</h3>

    <div class="container mt-5">
        <div class="row">
            <div class="col-6">
                <CalanderStartDate StartDate="selectedStartDate" StartDateChanged="HandleStartDateChanged" />
            </div>
            <div class="col-6">
                <CalanderEndDate EndDate="selectedEndDate" EndDateChanged="HandleEndDateChanged" />
                <br />
            </div>
        </div>
    </div>

        <EditForm Model="busDetailsAfternoon" OnValidSubmit="HandleAddingStudentToBus">
        <div class="mb-4 text-center">
            <label for="selectedStudent" class="form-label font-weight-bold mb-2">Which Student would you like to book for</label>
            <select @bind="@selectedStudentForForm" class="form-select" id="selectedStudent">
                <option selected disabled>Select A student</option>
                @foreach (var item in listOfStudents)
                {
                    <option value="@item.childUserNameId">@item.Name, @item.Surname</option>
                }
            </select>
        </div>

        <div class="mb-4 text-center">
            <label for="selectedBusOption" class="form-label font-weight-bold mb-2">Which area would you like to book for</label>
            <select @bind="selectedBusOption" class="form-select" id="selectedBusOption">
                <option selected disabled>Select an area</option>
                <option value="1">Rooihuiskraal/The Reeds</option>
                <option value="2">Wierdapark/Amberfield</option>
                <option value="3">Centurion</option>
            </select>
        </div>

      @if (selectedBusOption == 1)
        {
            // set the values of the busDetials object to the values in the object at selected
            busDetailsAfternoon.BusNumber = busOneTripDetails.BusNumber;
            busDetailsAfternoon.BusLimit = busOneTripDetails.BusLimit;
            busDetailsAfternoon.BusRouteAAddress = busOneTripDetails.BusRouteAAddress;
            busDetailsAfternoon.BusRouteAPickupTime = busOneTripDetails.BusRouteAPickupTime;
            busDetailsAfternoon.BusRouteBAddress = busOneTripDetails.BusRouteBAddress;
            busDetailsAfternoon.BusRouteBPickupTime = busOneTripDetails.BusRouteBPickupTime;
            busDetailsAfternoon.MorningTrip = busOneTripDetails.MorningTrip;
            busDetailsAfternoon.Area = busOneTripDetails.Area;
        }
        else if (selectedBusOption == 2)
        {
            busDetailsAfternoon.BusNumber = busTwoTripDetails.BusNumber;
            busDetailsAfternoon.BusLimit = busTwoTripDetails.BusLimit;
            busDetailsAfternoon.BusRouteAAddress = busTwoTripDetails.BusRouteAAddress;
            busDetailsAfternoon.BusRouteAPickupTime = busTwoTripDetails.BusRouteAPickupTime;
            busDetailsAfternoon.BusRouteBAddress = busTwoTripDetails.BusRouteBAddress;
            busDetailsAfternoon.BusRouteBPickupTime = busTwoTripDetails.BusRouteBPickupTime;
            busDetailsAfternoon.MorningTrip = busTwoTripDetails.MorningTrip;
            busDetailsAfternoon.Area = busTwoTripDetails.Area;
        }
        else if (selectedBusOption == 3)
        {
            busDetailsAfternoon.BusNumber = busThreeTripDetails.BusNumber;
            busDetailsAfternoon.BusLimit = busThreeTripDetails.BusLimit;
            busDetailsAfternoon.BusRouteAAddress = busThreeTripDetails.BusRouteAAddress;
            busDetailsAfternoon.BusRouteAPickupTime = busThreeTripDetails.BusRouteAPickupTime;
            busDetailsAfternoon.BusRouteBAddress = busThreeTripDetails.BusRouteBAddress;
            busDetailsAfternoon.BusRouteBPickupTime = busThreeTripDetails.BusRouteBPickupTime;
            busDetailsAfternoon.MorningTrip = busThreeTripDetails.MorningTrip;
            busDetailsAfternoon.Area = busThreeTripDetails.Area;
        }

       
        <div class="text-center mb-4">
            <button type="submit" class="btn btn-primary">Add Student to List</button>
        </div>

            <div class="mt-3">
            <p><strong>Bus Limit:</strong> @busDetailsAfternoon.BusLimit</p>
            <p><strong>First Stop:</strong> @busDetailsAfternoon.BusRouteAAddress</p>
            <p><strong>Arrival Time:</strong> @busDetailsAfternoon.BusRouteAPickupTime</p>
            <p><strong>Second Stop:</strong> @busDetailsAfternoon.BusRouteBAddress</p>
            <p><strong>Arrival Time:</strong> @busDetailsAfternoon.BusRouteBPickupTime</p>
        </div>

    </EditForm>
    </div>



<h1>@messageForBusCapacity</h1> @*This is the where we display the message in for capacity *@

@code {

    //set of properties we will use in addition to the modal to create the child object
    [Parameter]
    public int ParentID { get; set; }
    public bool isSpaceOnBus { get; set; }
    public string messageForBusCapacity = string.Empty;
    public int selectedBusOption { get; set; }  //use this value to store the selected option for bus routs

    public List<StudentDetails> listOfStudents = new List<StudentDetails>(); // create list for students object
    public string selectedStudentForForm { get; set; }

    public BusDetailsAfternoon busDetailsAfternoon = new BusDetailsAfternoon(); //Creating A list of Bus times and details for the afternoon

    protected override async Task OnInitializedAsync() // we Use This method so that when the page loads , we the list of students under the parent ID are loaded
    {
        listOfStudents = studentServices.getAllStudentsUnderLoggedInParent(ParentID); // method is run asynchronusly meaning we can run it parallel to other methods
    }


    // get parents details from the student we want to add and then email them. 


    public void HandleAddingStudentToBus(EditContext editContext)
    {
        var newStudentToAddToBus = (BusDetailsAfternoon)editContext.Model;
        newStudentToAddToBus.DateEntryCreated = DateTime.Today;
        //run the metjod that retuns the time only and store it in the correct property
        var entryTime = getCurrentTime();
        newStudentToAddToBus.TimeEntryCreated = entryTime;
        // need to get student number
        newStudentToAddToBus.ChildUserNameId = selectedStudentForForm;
        newStudentToAddToBus.TakingBusStartDate = selectedStartDate;
        newStudentToAddToBus.TakingBusEndDate = selectedEndDate;

        // get details for parent of this student 
        isSpaceOnBus = busRoutServices.checkSpaceOnTheBusAfternoon(newStudentToAddToBus);
        informUserIfThereIsSpaceAvailable(isSpaceOnBus);
        determineIfStudentShouldBeAddedToWaitingList(newStudentToAddToBus, isSpaceOnBus);
        Refresh();
    }

    public string getCurrentTime()
    {
        DateTime dateTime = DateTime.Now;
        string timeOnly = dateTime.ToString("HH:mm:ss");
        return timeOnly;
    }

    public async Task informUserIfThereIsSpaceAvailable(bool value)
    {
        if (value == true)
        {
            messageForBusCapacity = "There is currently space on the bus, the Student has been added to the bus schedule";
        }
        else
        {
            messageForBusCapacity = "There is currently No space on the Bus, Would you like to add your Student to the waiting List";
        }
    }

    public void determineIfStudentShouldBeAddedToWaitingList(BusDetailsAfternoon studentWeAreAttemptingToAdd, bool isThereSpaceCheck)
    {
        //sending the correct email
        var parent = studentServices.GetParentObjectUsingchildUserNameID(studentWeAreAttemptingToAdd.ChildUserNameId); // This is how I get the Parent Details for the email
        var child = studentServices.GetStudentObjectByChildUserNameID(studentWeAreAttemptingToAdd.ChildUserNameId); // this is how we get the child object
        EmailSender emailSender = new EmailSender();

        if (isThereSpaceCheck == true)
        {
            //if there is space on the bus, this student will be added to the bus table
            busRoutServices.addStudentToAfternoonBus(studentWeAreAttemptingToAdd);
            emailSender.SuccessfullyAddedToBus(parent.firstName, parent.emailAddress, child.Name, studentWeAreAttemptingToAdd.Area , "Afternoon ");


            //lets get the parent ID and then email the parent 
        }
        else
        {

            // Here we take the student details componenet that we wanted to add to the list
            // write the variables to the WaitingListDetialsClass
            // Add this WaitingListDetails object to the waiting List table
            WaitingListDetails studentToAdd = new WaitingListDetails();
            studentToAdd.id = studentWeAreAttemptingToAdd.AfternoonID;
            studentToAdd.ChildUserNameId = studentWeAreAttemptingToAdd.ChildUserNameId;
            studentToAdd.BusNumber = studentWeAreAttemptingToAdd.BusNumber;
            studentToAdd.BusLimit = studentWeAreAttemptingToAdd.BusLimit;
            studentToAdd.MorningTrip = studentWeAreAttemptingToAdd.MorningTrip;
            studentToAdd.Area = studentWeAreAttemptingToAdd.Area;
            studentToAdd.BusRouteAAddress = studentWeAreAttemptingToAdd.BusRouteAAddress;
            studentToAdd.BusRouteAPickupTime = studentWeAreAttemptingToAdd.BusRouteAPickupTime;
            studentToAdd.BusRouteBAddress = studentWeAreAttemptingToAdd.BusRouteBAddress;
            studentToAdd.BusRouteBPickupTime = studentWeAreAttemptingToAdd.BusRouteBPickupTime;
            studentToAdd.DateEntryCreated = studentWeAreAttemptingToAdd.DateEntryCreated;
            studentToAdd.TimeEntryCreated = studentWeAreAttemptingToAdd.TimeEntryCreated;
            studentToAdd.TakingBusStartDate = studentWeAreAttemptingToAdd.TakingBusStartDate;
            studentToAdd.TakingBusEndDate = studentWeAreAttemptingToAdd.TakingBusEndDate;

            busRoutServices.addStudentToWaitingList(studentToAdd);
            emailSender.AddedToWaitingList(parent.firstName, parent.emailAddress, child.Name, studentWeAreAttemptingToAdd.Area);

            //fire email for Waiting list 

        }
    }

    public void Refresh()
    {
        var refreshPage = new RefreshPage(navigationManager);
        refreshPage.refreshApplication();
    }


    //create a class from a List of fixed bus details
    public BusDetailsAfternoon busOneTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = BusOneAfternoonTripDetails.BusNumber,
            BusLimit = BusOneAfternoonTripDetails.BusLimit,
            BusRouteAAddress = BusOneAfternoonTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusOneAfternoonTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusOneAfternoonTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusOneAfternoonTripDetails.BusRouteBPickupTime,
            MorningTrip = BusOneAfternoonTripDetails.MorningTrip,
            Area = BusOneAfternoonTripDetails.Area,
        };

    public BusDetailsAfternoon busTwoTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = BusTwoAfternoonTripDetails.BusNumber,
            BusLimit = BusTwoAfternoonTripDetails.BusLimit,
            BusRouteAAddress = BusTwoAfternoonTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusTwoAfternoonTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusTwoAfternoonTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusTwoAfternoonTripDetails.BusRouteBPickupTime,
            MorningTrip = BusTwoAfternoonTripDetails.MorningTrip,
            Area = BusTwoAfternoonTripDetails.Area,
        };

    public BusDetailsAfternoon busThreeTripDetails = new BusDetailsAfternoon()
        {
            BusNumber = BusThreeAfternoonTripDetails.BusNumber,
            BusLimit = BusThreeAfternoonTripDetails.BusLimit,
            BusRouteAAddress = BusThreeAfternoonTripDetails.BusRouteAAddress,
            BusRouteAPickupTime = BusThreeAfternoonTripDetails.BusRouteAPickupTime,
            BusRouteBAddress = BusThreeAfternoonTripDetails.BusRouteBAddress,
            BusRouteBPickupTime = BusThreeAfternoonTripDetails.BusRouteBPickupTime,
            MorningTrip = BusThreeAfternoonTripDetails.MorningTrip,
            Area = BusThreeAfternoonTripDetails.Area,
        };




    //Code to handle calander function

    private DateTime selectedStartDate;
    private DateTime selectedEndDate;

    private async Task HandleStartDateChanged(DateTime startDate)
    {
        selectedStartDate = startDate;
        // Additional logic, if needed
    }

    private async Task HandleEndDateChanged(DateTime endDate)
    {
        selectedEndDate = endDate;
        // Additional logic, if needed
    }

    [Parameter]
    public DateTime StartDate { get; set; }

    [Parameter]
    public EventCallback<DateTime> StartDateChanged { get; set; }

    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;
    private List<int> calendarDays;
    private int startDate = -1;
    private string startDateSelected = "Select date";
}
