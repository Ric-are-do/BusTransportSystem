@using BusServiceApplication.HelperMethods;
@using BusServiceApplication.Pages.Parent_Componenets;
@using BusServiceApplication.Shared;
@inject AdministratorServices administratorServices
@inject StudentService studentsServices;
@inject BusRoutServices busRoutServices;
@inject LoginPageService loginPageService;
@inject NavigationManager navigationManager;




<div class="text-center" style="background-color: #A4C1EC; padding: 20px;">
    <h2>Students who currently have seating</h2>
    <h5>Below is a list of all students under your profile.</h5>
    <h5>If you have successfully added a student to a bus route, their details will appear on this list.</h5>
    <h5>If not, then the students may be on the waiting list.</h5>
    <h5>You can contact us on 0812440694 for any enquiries</h5>
    <h5> --Please Note --</h5>
    <h5> Deleting your child from a bus rout will only remove them from that partucular list , the child will still be noted on any other bus routs that you have added them to.</h5>
</div>


<div class="container mt-4 text-center">
    <div class="border">
        <table class="table table-striped table-hover table-sm ">
            <thead class="table-primary">
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Grade</th>
                    <th>CellNumber</th>
                    <th>Area</th>
                    <th>Bus Number</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                <!-- Table body rows for Morning -->
                @foreach (var MorningItem in studnetsOnMorningBus)
                {
                    <tr>
                        <td>@childUserName(MorningItem.ChildUserNameId).Name</td>
                        <td>@childUserName(MorningItem.ChildUserNameId).Surname</td>
                        <td>@childUserName(MorningItem.ChildUserNameId).Grade</td>
                        <td>@childUserName(MorningItem.ChildUserNameId).CellphoneNumber</td>
                        <td>@MorningItem.Area</td>
                        <td>@MorningItem.BusNumber</td>
                        <td>@MorningItem.TakingBusStartDate</td>
                        <td>@MorningItem.TakingBusEndDate</td>

                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteRecordFromMorningBus(MorningItem.ChildUserNameId, MorningItem.BusNumber)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <h1>Afternoon list</h1>
    <div class="border mt-4">
        <table class="table table-striped table-hover">
            <thead class="table-primary">
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Grade</th>
                    <th>CellNumber</th>
                    <th>Area</th>
                    <th>Bus Number</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                <!-- Table body rows for Afternoon -->
                @foreach (var AfternoonItem in studentsOnAfternoonBus)
                {
                    <tr>
                        <td>@childUserName(AfternoonItem.ChildUserNameId).Name</td>
                        <td>@childUserName(AfternoonItem.ChildUserNameId).Surname</td>
                        <td>@childUserName(AfternoonItem.ChildUserNameId).Grade</td>
                        <td>@childUserName(AfternoonItem.ChildUserNameId).CellphoneNumber</td>
                        <td>@AfternoonItem.Area</td>
                        <td>@AfternoonItem.BusNumber</td>
                        <td>@AfternoonItem.TakingBusStartDate</td>
                        <td>@AfternoonItem.TakingBusEndDate</td>
                                                    
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => DeleteRecordFromAfternoonBus(AfternoonItem.ChildUserNameId, AfternoonItem.BusNumber)">Delete</button>
                            </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    [Parameter]
    //fixed 
    public int ParentIDForStudentsUnderParent { get; set; }
    // public ParentDetails ThisParentDetails  { get; set; }

    public List<BusDetailsMorning> studnetsOnMorningBus = new List<BusDetailsMorning>();
    public List<BusDetailsAfternoon> studentsOnAfternoonBus = new List<BusDetailsAfternoon>();
    public List<StudentDetails> studnetDetails = new List<StudentDetails>();
    public StudentDetails thisStudent = new StudentDetails();
    public List<StudentDetails> studentUnderThisParent = new List<StudentDetails>(); // can be potentially removed as there are no references 

    //Temp field used for comparing the details between parent and student 

    public List<StudentDetails> temporaryAfternoonListOfStudentsUnderParent = new List<StudentDetails>();


    protected override async Task OnInitializedAsync()
    {
        studnetsOnMorningBus = AddStudentsToParentWhereIdMathcesMorning(busRoutServices.GetListOfStudentsOnMorningBus());
        studentsOnAfternoonBus = AddStudentsToParentWhereIdMathcesAfternoon(busRoutServices.GetListOfStudentsOnAfternoonBus());
        ; // Get parent ID and use that to find children that are under the parent 
    }

    public StudentDetails childUserName(string userName)
    {
        var thisStudentsDetails = studentsServices.GetStudentObjectByChildUserNameID(userName);
        return thisStudentsDetails;

    }


    //Need to filter the returned list to only show children where the parent ID is the same as the parent
    // first loop through the list of students wher the parent ID is the same as thisParentID, once we loop then we add them to the list
    //next we loop through this list and compate to the different parent / student lists

    public List<BusDetailsMorning> AddStudentsToParentWhereIdMathcesMorning(List<BusDetailsMorning> busDetailsMorning)
    {
        //there is a method in child services to get all the child names based on the parent id 
        // store that in a temp list 
        // have the temp list loop through the morning and afternoon lists and comparte the child names 
        // utput those names to somehwre where we can use them to compare ahgaint the different busses

        var tempMorningList = studentsServices.getAllStudentsUnderLoggedInParent(ParentIDForStudentsUnderParent);

        List<BusDetailsMorning> tempListOfStudentsMorning = new  List<BusDetailsMorning>();

        foreach (var item in busDetailsMorning)
        {
            foreach( var insideItem in tempMorningList )
            {
                if(item.ChildUserNameId == insideItem.childUserNameId)
                {
                    tempListOfStudentsMorning.Add(item);
                }
            }
        }

        return tempListOfStudentsMorning;
    }

    public List<BusDetailsAfternoon> AddStudentsToParentWhereIdMathcesAfternoon(List<BusDetailsAfternoon> busDetailsMorning)
    {
        //there is a method in child services to get all the child names based on the parent id
        // store that in a temp list
        // have the temp list loop through the morning and afternoon lists and comparte the child names
        // utput those names to somehwre where we can use them to compare ahgaint the different busses

        var tempMorningList = studentsServices.getAllStudentsUnderLoggedInParent(ParentIDForStudentsUnderParent);

        List<BusDetailsAfternoon> tempListOfStudentsAfternoon = new List<BusDetailsAfternoon>();

        foreach (var item in busDetailsMorning)
        {
            foreach (var insideItem in tempMorningList)
            {
                if (item.ChildUserNameId == insideItem.childUserNameId)
                {
                    tempListOfStudentsAfternoon.Add(item);
                }
            }
        }

        return tempListOfStudentsAfternoon;
    }


    // delete students off bus list
    public void DeleteRecordFromMorningBus(string childUserId, int busNumber)
    {
        busRoutServices.DeleteStudentFromBusRoutMorning(childUserId, busNumber);
        // Refresh the data after deletion
        Refresh();
    }

    public void DeleteRecordFromAfternoonBus(string childUserId, int busNumber)
    {
        busRoutServices.DeleteStudentFromBusRoutAfternoon(childUserId, busNumber);
        // Refresh the data after deletion
        Refresh();
    }

    public void Refresh()
    {
        var refreshPage = new RefreshPage(navigationManager);
        refreshPage.refreshApplication();
    }
}